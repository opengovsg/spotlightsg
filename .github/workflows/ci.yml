name: CI
on:
  push:
  pull_request:
    branches: [develop, master]
  workflow_dispatch:

env:
  PRODUCTION_BRANCH: refs/heads/develop
  EB_APPLICATION: 'production-spotlightsg'
  EB_PRODUCTION_ENVIRONMENT: 'production-spotlightsg'
  DB_USERNAME: spotlight_db_test_user
  DB_DATABASE: spotlight_db_test
  DB_PASSWORD: test
jobs:
  test:
    name: Lint and test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_DB: spotlight_db_test
          POSTGRES_USER: spotlight_db_test_user
          POSTGRES_PASSWORD: test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2

      - name: Read .nvmrc
        run: echo NVMRC=`cat .nvmrc` >> $GITHUB_ENV

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NVMRC }}

      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - name: Lint lockfiles
        run: |
          npx lockfile-lint --type npm --path frontend/package-lock.json --validate-https --allowed-hosts npm
          npx lockfile-lint --type npm --path backend/package-lock.json --validate-https --allowed-hosts npm
      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Run tests and generate coverage
        run: npm run coverage

      - name: Build
        run: npm run build

      - name: Create .npmrc
        run: echo 'unsafe-perm=true' > .npmrc

        # Force hooks to run even during config deployment
        # https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-linux-extend.html
      - name: Copy platform hooks into confighooks
        run: mkdir .platform/confighooks && cp -r .platform/hooks/. .platform/confighooks

      - name: Upload deployment files
        uses: actions/upload-artifact@v2
        with:
          name: deployment-files
          path: |
            Buildfile
            package*.json
            .npmrc
            frontend/build
            backend/package*.json
            backend/build
            .platform
            .nvmrc
  gatekeep:
    name: Determine if deploy is needed
    outputs:
      proceed: ${{ steps.determine_proceed.outputs.proceed }}
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - id: determine_proceed
        run: |
          if [[ -z "$AWS_ACCESS_KEY_ID" || -z "$AWS_SECRET_ACCESS_KEY" || -z "$EB_APPLICATION" ]]; then
            echo '::set-output name=proceed::false';
            echo '::set-output name=proceed::false';
          elif [[ $GITHUB_REF == $STAGING_BRANCH && -n "$EB_STAGING_ENVIRONMENT" ]]; then
            echo '::set-output name=proceed::true';
          elif [[ $GITHUB_REF == $PRODUCTION_BRANCH && -n "$EB_PRODUCTION_ENVIRONMENT" ]]; then
            echo '::set-output name=proceed::true';
          else
            echo '::set-output name=proceed::false';
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy:
    name: Deploy to Elastic Beanstalk
    runs-on: ubuntu-latest
    needs: [test, gatekeep]
    if: needs.gatekeep.outputs.proceed == 'true'
    steps:
      - name: Download frontend build artifacts
        uses: actions/download-artifact@v2
        with:
          name: deployment-files
          path: deploy

      - name: Generate deployment package
        run: |
          cd deploy
          chmod -R +x .platform/hooks .platform/confighooks
          zip -r ../deploy.zip .
      - name: Set branch specific env vars
        run: |
          timestamp=$(TZ=Asia/Singapore date '+%Y%m%d%H%M%S')
          if [[ $GITHUB_REF == $STAGING_BRANCH ]]; then
            echo "EB_ENVIRONMENT=$EB_STAGING_ENVIRONMENT" >> $GITHUB_ENV
            echo "VERSION_LABEL=stg-$timestamp" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == $PRODUCTION_BRANCH ]]; then
            echo "EB_ENVIRONMENT=$EB_PRODUCTION_ENVIRONMENT" >> $GITHUB_ENV
            echo "VERSION_LABEL=prod-$timestamp" >> $GITHUB_ENV
          fi
      - name: Print branch specific env vars
        run: |
          echo EB_ENVIRONMENT=$EB_ENVIRONMENT
          echo VERSION_LABEL=$VERSION_LABEL
      - name: Deploy to EB
        uses: opengovsg/beanstalk-deploy@v18
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ env.EB_APPLICATION }}
          environment_name: ${{ env.EB_ENVIRONMENT }}
          version_label: ${{ env.VERSION_LABEL }}
          region: ap-southeast-1
          version_description: ${{ github.SHA }}
          deployment_package: deploy.zip
          wait_for_deployment: false
